1.- Crear carpeta Models (interactuara  es la estructura con la base de datos)
2.- En la carpeta models crear clase para crear la tabla a interactuar

ejemplo contabilidad_cajachica.cs

namespace cossmil.Models
{
    public class contabilidad_cajachica
    {
        public int id { get; set; }
        public string montoinicial { get; set; }
        public string transacciones { get; set; }

        public string responsable { get; set; }

        public string aprobaciones { get; set; }

        public string fechaf { get; set; }

        public string comentario { get; set; }

       
        public DateTime FechaCreacion { get; set; }

    }
}

3.- Modificar el context para a単adir esta clase
 public DbSet<contabilidad_cajachica> Cajachica { get; set; } //<clase> Nombre de la tabla

 4.- En la linea de comandos (Consola de Administrador de paquetes)
 Estos comandos utilizar de forma secuencial
 4.1 Add-migration Cajachica
 4.2 Update-database

 5.- A単adir controlador - Controller
 5.1 Agregar clase controlador - api blanco

 6.- A単adir librerias
 using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using cossmil.Models;

7.- A;adir clases
public class CajaChicaController : ControllerBase
    {
        private readonly FarContext _context;

        public CajaChicaController(FarContext context)
        {

            //CajaChica
            _context = context;

        }
    }

8.- A;adir get
  [HttpGet]
        public async Task<IActionResult> Get()
        {
            try
            {
                var listcajachica = await _context.Cajachica.ToListAsync();
                return Ok(listcajachica);
            }
            catch (Exception ex)
            {

                return BadRequest(ex.Message);


            }


        }

Resultado

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using cossmil.Models;


namespace cossmil.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CajaChicaController : ControllerBase
    {
        private readonly FarContext _context;

        public CajaChicaController(FarContext context)
        {

            //CajaChica
            _context = context;

        }

        [HttpGet]
        public async Task<IActionResult> Get()
        {
            try
            {
                var listcajachica = await _context.Cajachica.ToListAsync();
                return Ok(listcajachica);
            }
            catch (Exception ex)
            {

                return BadRequest(ex.Message);


            }


        }

    }
}


9.- A単adir Interfaz en Frontend
10.- Ir a la carpeta interfaz y crear un ts

cajachica.ts
nombre interfaz cajachicaInter

export interface cajachicaInter {
    // columna db 
    id?: number,
    montoinicial: string,
    transacciones: string,
    responsable: string,
    aprobaciones:number,
    fechaf: string,
    fechai: string,
    fechaa: string,
    totalcompras: string,
    totalfac:string,
    totalrecibos:string,
    otros:string,
    comentario:string,
    
     
    }

11.- servicios
crear servicios
11.1    ng g s services/cajachica
11.2 crear la funcion get cajachica

import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from 'src/environments/environment';
import { cajachicaInter } from '../Interfaz/cajachica';



@Injectable({
  providedIn: 'root'
})
export class CajachicaService {

  //entorno para llamar

  private Myappurl: string = environment.endpoint;
  private Myapiurl: string = 'api/Cajachica/';

//constructor
  constructor(private http: HttpClient) { }

  //funcion obtener resultados
  getcaja(): Observable<cajachicaInter[]> {
     
    return this.http.get<cajachicaInter[]>(this.Myappurl+this.Myapiurl);
  }
}


